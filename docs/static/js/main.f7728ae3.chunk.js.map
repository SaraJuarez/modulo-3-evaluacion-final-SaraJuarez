{"version":3,"sources":["components/miscellaneous.png","components/mujer.png","components/filter.js","components/characterCard.js","components/characterList.js","services/getDataFromApi.js","components/characterDetail.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Filter","props","className","title","alt","src","onSubmit","defaultFunction","value","lastSearch","onChange","inputFunction","CharacterCard","to","info","id","name","image","species","CharacterList","charactersListHtml","characters","map","character","index","key","getDataFromApi","fetch","then","response","json","data","results","user","planet","location","episodes","episode","length","alive","status","CharacterDetail","characterDetail","find","parseInt","match","params","human","miscellaneous","App","useState","setCharacter","characterFilter","setCharacterFilter","inputText","setInputText","useEffect","preventDefault","ev","handleInput","target","charactersSelected","filter","toUpperCase","includes","alert","exact","path","render","routerProps","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f7728ae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/miscellaneous.10036a0d.png\";","module.exports = __webpack_public_path__ + \"static/media/mujer.5f4a854d.png\";","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Filter = (props) => {\n    return (\n        <div className='filter-box'>\n            <img className='filter-box__logo' title='Logo' alt='Logo Rick and Morty' src='https://help.redbubble.com/hc/article_attachments/360002309526/Rick_and_Morty_-_logo__English_.png'></img>\n            <form onSubmit={props.defaultFunction}>\n                <input value={props.lastSearch} onChange={props.inputFunction} className='filter-box__input'></input>\n            </form>\n\n        </div >\n    )\n}\n\n\nFilter.propTypes = {\n    defaultFunction: PropTypes.func,\n    inputFunction: PropTypes.func,\n    lastSearch: PropTypes.string\n}\n\nexport default Filter;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nconst CharacterCard = (props) => {\n    return (\n        <Link className='link' to={`/CharacterDetail/` + props.info.id}>\n            <div className='wrap__character'>\n                <img className='wrap__character--image' title={props.info.name} alt={`imagen de + ${props.info.name}`} src={props.info.image}></img>\n                <p className='wrap__character--name'>{props.info.name}</p>\n                <p className='wrap__character--species'>{props.info.species}</p>\n            </div>\n        </Link>\n    )\n}\n\nCharacterCard.propTypes = {\n    info: PropTypes.object,\n}\n\nexport default CharacterCard;\n\n","import React from 'react';\nimport CharacterCard from './characterCard';\nimport PropTypes from 'prop-types';\n\n\n\nconst CharacterList = (props) => {\n    let charactersListHtml = props.characters.map((character, index) =>\n        <CharacterCard key={index} info={character} />\n    )\n\n    return (\n\n        <div className='wrap'>\n            {charactersListHtml}\n        </div>\n    )\n}\n\nCharacterList.propTypes = {\n    characters: PropTypes.array,\n}\n\n\nexport default CharacterList;","const getDataFromApi = () => {\n    return fetch('https://rickandmortyapi.com/api/character/')\n        .then(response => response.json())\n        .then(data => {\n            return data.results.map(user => {\n                return {\n                    id: user.id,\n                    name: user.name,\n                    species: user.species,\n                    image: user.image,\n                    planet: user.location.name,\n                    episodes: user.episode.length,\n                    alive: user.status\n                }\n            })\n        })\n\n\n}\n\n\nexport default getDataFromApi;","import React from 'react';\nimport { Link } from \"react-router-dom\";\nimport miscellaneous from './miscellaneous.png';\nimport human from './mujer.png';\nimport PropTypes from 'prop-types';\n\n\nconst CharacterDetail = (props) => {\n    let characterDetail =\n        props.characters.find(character => character.id === parseInt(props.match.params.id))\n\n    return (\n        <div className='card-box'>\n            <img className='card-box__logo' title='Logo' alt='Logo Rick and Morty' src='https://help.redbubble.com/hc/article_attachments/360002309526/Rick_and_Morty_-_logo__English_.png'></img>\n            <Link className='card-box__link-return' to={`/`}> > Volver</Link>\n\n            <div className='card-box__infoCharacter'>\n                <div >\n                    <img title={characterDetail.name} alt={`imagen de + ${characterDetail.name}`} src={characterDetail.image} className='detail-image' ></img>\n                </div>\n                <div className='card-box__infoCharacter--text'>\n                    <p>Nombre: {characterDetail.name} <i className={characterDetail.alive === 'Alive' ? 'fas fa-heartbeat' : 'fas fa-skull-crossbones'}></i></p>\n                    <p >Especie: <img className='woman' src={characterDetail.species === 'Human' ? human : miscellaneous}></img></p>\n                    <p>Origen: {characterDetail.planet}</p>\n                    <p>Episodios: {characterDetail.episodes}</p>\n\n\n                </div>\n            </div>\n\n\n\n        </div>\n    )\n}\n\nCharacterDetail.propTypes = {\n    characters: PropTypes.array,\n    match: PropTypes.object,\n\n}\n\n\nexport default CharacterDetail;","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport Filter from './components/filter';\nimport CharacterList from './components/characterList';\nimport getDataFromApi from './services/getDataFromApi';\nimport { Route, Switch } from 'react-router-dom';\nimport CharacterDetail from './components/characterDetail';\nimport PropTypes from 'prop-types';\n\n\nfunction App() {\n  const [character, setCharacter] = useState([]);\n  const [characterFilter, setCharacterFilter] = useState([]);\n  const [inputText, setInputText] = useState('');\n  useEffect(() => {\n    // localStorage.setItem('search', '')\n    getDataFromApi().then(data => { setCharacter(data); setCharacterFilter(data) })\n  }, []);\n\n\n  // const lastSearch = localStorage.getItem('search');\n\n  const preventDefault = (ev) => {\n    ev.preventDefault();\n  }\n\n  const handleInput = (ev) => {\n    let inputText = ev.target.value;\n    setInputText(inputText);\n\n    let charactersSelected = character.filter(character => character.name.toUpperCase().includes(inputText.toUpperCase()))\n    if (charactersSelected.length === 0) {\n      alert(`No hay ning√∫n personaje que coincida con la palabra ` + inputText)\n    }\n    else {\n      setCharacterFilter(charactersSelected);\n    }\n\n  }\n\n  return (\n    <Switch>\n      <Route exact path='/' render={() =>\n        <main className=\"App\">\n          <Filter lastSearch={inputText} defaultFunction={preventDefault} inputFunction={handleInput} />\n          <CharacterList characters={characterFilter} />\n\n        </main>\n      }></Route>\n      <Route\n        path='/CharacterDetail/:id'\n        render={routerProps => (\n          <CharacterDetail characters={character} match={routerProps.match}\n          />\n        )}\n      ></Route>\n    </Switch>\n  );\n}\n\nApp.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      characterId: PropTypes.string,\n    }),\n  }),\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}